name: CI/CD GPIT

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production

    steps:
      # 1Ô∏è‚É£ Cloner le d√©p√¥t
      - name: üì¶ Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Installer Node.js
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3Ô∏è‚É£ Installer sshpass pour le d√©ploiement
      - name: üîë Installer sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      # 4Ô∏è‚É£ Installer backend
      - name: ‚öôÔ∏è Install backend
        working-directory: ./backend
        run: npm ci

      # 5Ô∏è‚É£ Lancer tests backend
      - name: üß™ Test backend
        working-directory: ./backend
        run: npm test || echo "‚ö†Ô∏è Aucun test d√©fini, on continue"

      # 6Ô∏è‚É£ Installer frontend
      - name: ‚öôÔ∏è Install frontend
        working-directory: ./frontend
        run: npm ci

      # 7Ô∏è‚É£ Build frontend
      - name: üß± Build frontend
        working-directory: ./frontend
        run: npm run build

      # 8Ô∏è‚É£ Analyse SonarCloud
      - name: üîç SonarCloud Analysis
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          projectKey: gpit
          organization: EmnaMansour
          token: ${{ secrets.SONAR_TOKEN }}

      # 9Ô∏è‚É£ D√©ploiement SSH
      - name: üöÄ D√©ploiement sur serveur
        if: success()
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASS: ${{ secrets.SERVER_PASS }}
        run: |
          sshpass -p "$SERVER_PASS" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            cd /var/www/gpit &&
            git reset --hard &&
            git pull origin main &&
            npm ci --prefix backend &&
            npm run build --prefix frontend &&
            pm2 restart all
          "

      # üîü Test post-d√©ploiement backend
      - name: üîç Test post-d√©ploiement backend
        if: success()
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
        run: |
          echo "Test du backend..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$SERVER_IP:$SERVER_PORT/api/health)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "‚ùå Backend non op√©rationnel !"
            exit 1
          else
            echo "‚úÖ Backend OK"

      # 1Ô∏è‚É£1Ô∏è‚É£ Test post-d√©ploiement frontend
      - name: üîç Test post-d√©ploiement frontend
        if: success()
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "Test du frontend..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$SERVER_IP)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "‚ùå Frontend non op√©rationnel !"
            exit 1
          else
            echo "‚úÖ Frontend OK"
