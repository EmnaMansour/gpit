name: CI/CD GPIT

on:
  push:
    branches:
      - main

jobs:
  build-test-analyze-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Cloner ton d√©p√¥t
      - name: üì¶ Cloner le code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Installer le backend
      - name: ‚öôÔ∏è Installer le backend
        working-directory: ./backend
        run: |
          npm install

      # 3Ô∏è‚É£ Lancer les tests du backend
      - name: üß™ Tests backend
        working-directory: ./backend
        run: |
          npm test || echo "‚ö†Ô∏è Aucun test d√©fini, on continue"

      # 4Ô∏è‚É£ Installer le frontend
      - name: ‚öôÔ∏è Installer le frontend
        working-directory: ./frontend
        run: |
          npm install

      # 5Ô∏è‚É£ Lancer le build du frontend
      - name: üß± Build frontend
        working-directory: ./frontend
        run: |
          npm run build

      # 6Ô∏è‚É£ Analyse du code avec SonarQube
      - name: üîç Analyse SonarQube
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=gpit
            -Dsonar.host.url=http://localhost:9000
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # 7Ô∏è‚É£ D√©ploiement automatique si tout est OK
      - name: üöÄ D√©ploiement
        if: success()
        run: |
          echo "D√©ploiement automatique en cours..."
          # Exemple de d√©ploiement SSH vers ton serveur
          # (tu peux l‚Äôadapter √† ton cas)
          sshpass -p "${{ secrets.SERVER_PASS }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
            cd /var/www/gpit &&
            git pull origin main &&
            npm install --prefix backend &&
            npm run build --prefix frontend &&
            pm2 restart all
          "
