name: CI/CD GPIT Docker + Cypress + SonarQube

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production

    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: üîë Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass curl

      - name: üê≥ Build Docker backend
        run: docker build -t gpit-backend ./backend

      - name: üê≥ Build Docker frontend
        run: docker build -t gpit-frontend ./frontend

      - name: ‚ñ∂Ô∏è Run backend container
        run: |
          docker run -d --name gpit-backend-test -p 8000:8000 --env-file ./backend/.env gpit-backend
          sleep 10

      - name: üß™ Cypress tests
        uses: cypress-io/github-action@v5
        with:
          start: docker run -d -p 5173:5173 gpit-frontend
          wait-on: http://localhost:5173
          wait-on-timeout: 60
          browser: chrome

      - name: üîç SonarQube Analysis
        env:
          SONAR_HOST_URL: http://localhost:9000
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd backend
          sonar-scanner \
            -Dsonar.projectKey=gpit \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: üöÄ Deploy to server
        if: success()
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASS: ${{ secrets.SERVER_PASS }}
        run: |
          sshpass -p "$SERVER_PASS" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            cd /var/www/gpit &&
            docker-compose down &&
            docker-compose pull &&
            docker-compose up -d
          "

      - name: üîç Test backend post-deploy
        if: success()
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$SERVER_IP:$SERVER_PORT/api/health)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "‚ùå Backend non op√©rationnel !"
            exit 1
          else
            echo "‚úÖ Backend OK"

      - name: üîç Test frontend post-deploy
        if: success()
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$SERVER_IP)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "‚ùå Frontend non op√©rationnel !"
            exit 1
          else
            echo "‚úÖ Frontend OK"
