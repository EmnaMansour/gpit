name: CI/CD GPIT Docker + Cypress + SonarCloud

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_ENV: test

jobs:
  build-test-sonar:
    runs-on: ubuntu-latest
    
    services:
      mongo:
        image: mongo:6.0
        ports: [27017:27017]
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1️⃣ Checkout repository
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 🔑 Essentiel pour SonarCloud

      # 2️⃣ Setup Node.js
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # 3️⃣ Install dependencies avec npm ci (plus fiable)
      - name: 📥 Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: 📥 Install frontend dependencies
        working-directory: frontend
        run: npm ci

      # 4️⃣ 🆕 Générer la couverture de code
      - name: 🧪 Run backend tests with coverage
        working-directory: backend
        run: |
          npm test -- --coverage --watchAll=false || echo "Tests backend terminés"
          ls -la coverage/ # Vérifier que lcov.info existe

      - name: 🧪 Run frontend tests with coverage
        working-directory: frontend
        run: |
          npm test -- --coverage --watchAll=false || echo "Tests frontend terminés"
          ls -la coverage/ # Vérifier que lcov.info existe

      # 5️⃣ Build Docker images
      - name: 🐳 Build Docker backend
        run: docker build -t gpit-backend ./backend

      - name: 🐳 Build Docker frontend
        run: docker build -t gpit-frontend ./frontend

      # 6️⃣ Run backend container for tests
      - name: ▶️ Run backend container
        run: |
          docker run -d --name gpit-backend-test -p 8000:8000 \
            -e MONGO_URI=mongodb://admin:password@localhost:27017/gpit \
            gpit-backend
          sleep 15
          curl -f http://localhost:8000/api/health || echo "Backend starting..."

      # 7️⃣ Run Cypress E2E tests
      - name: 🧪 Cypress E2E tests
        uses: cypress-io/github-action@v5
        with:
          start: docker run -d -p 5173:5173 gpit-frontend
          wait-on: http://localhost:5173
          wait-on-timeout: 120
          browser: chrome
          working-directory: frontend

      # 8️⃣ 🆕 Cache SonarCloud
      - name: 🗂️ Cache SonarCloud
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # 9️⃣ SonarCloud analysis (CORRIGÉ)
      - name: 🔍 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 🔑 Essentiel
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.projectKey=gestion_parc_info
            -Dsonar.projectName="Gestion Parc Info"
            -Dsonar.sources=backend,frontend/src
            -Dsonar.tests=backend/__tests__,frontend/src/__tests__
            -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/node_modules/**,**/*.d.ts,**/cypress/**,**/dist/**
            -Dsonar.qualitygate.wait=true

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-test-sonar
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      # 1️⃣0️⃣ Deploy to server via SSH
      - name: 🔑 SSH Deploy to Server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /var/www/gpit
            echo "🔄 Arrêt des containers..."
            docker-compose down
            echo "📥 Pull des nouvelles images..."
            docker-compose pull
            echo "🚀 Démarrage des services..."
            docker-compose up -d --remove-orphans
            echo "⏳ Attente du démarrage..."
            sleep 30

      # 1️⃣1️⃣ Test backend post-deploy
      - name: 🔍 Test backend post-deploy
        run: |
          echo "🧪 Test du backend sur ${{ secrets.SERVER_IP }}:8000"
          max_attempts=10
          attempt=1
          until curl -f -s http://${{ secrets.SERVER_IP }}:8000/api/health; do
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Backend non opérationnel après $max_attempts tentatives"
              exit 1
            fi
            echo "⏳ Tentative $attempt/$max_attempts..."
            sleep 10
            attempt=$((attempt + 1))
          done
          echo "✅ Backend opérationnel"

      # 1️⃣2️⃣ Test frontend post-deploy
      - name: 🔍 Test frontend post-deploy
        run: |
          echo "🧪 Test du frontend sur ${{ secrets.SERVER_IP }}"
          max_attempts=10
          attempt=1
          until curl -f -s http://${{ secrets.SERVER_IP }}; do
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Frontend non opérationnel après $max_attempts tentatives"
              exit 1
            fi
            echo "⏳ Tentative $attempt/$max_attempts..."
            sleep 10
            attempt=$((attempt + 1))
          done
          echo "✅ Frontend opérationnel"