describe('Dashboard Tests', () => {
  // Fonction de login réutilisable
  const login = (email: string, password: string) => {
    cy.visit('/login');
    
    // Vérifier que la page de login est chargée
    cy.contains('Connexion', { timeout: 10000 }).should('be.visible');
    
    // Remplir le formulaire
    cy.get('input[name=email]').type(email);
    cy.get('input[name=password]').type(password);
    cy.get('button').contains(/se connecter|login/i).click();
    
    // Attendre que la navigation soit complète
    cy.url().should('include', '/dashboard', { timeout: 15000 });
    
    // Attendre que le dashboard soit chargé
    cy.get('body').should(($body) => {
      expect($body).to.exist;
    });
    
    // Petite pause pour laisser le temps au contenu de charger
    cy.wait(2000);
  };

  // Vérifie les éléments du dashboard selon le rôle
  const checkDashboardElements = (role: string) => {
    // D'abord, debuguer pour voir ce qu'il y a sur la page
    cy.get('body').then(($body) => {
      console.log('=== CONTENU DE LA PAGE ===');
      console.log($body.text());
      console.log('==========================');
    });

    // Prendre une screenshot pour voir l'état de la page
    cy.screenshot(`debug-${role}-before-checks`);

    if (role === 'Admin') {
      // Vérifications pour l'admin - avec différentes variantes possibles
      cy.contains(/total.*utilisateur/i, { timeout: 10000 }).should('exist');
      cy.contains(/technicien/i, { timeout: 10000 }).should('exist');
      cy.contains(/employé/i, { timeout: 10000 }).should('exist');
      cy.contains(/total.*équipement/i, { timeout: 10000 }).should('exist');
      cy.contains(/total.*incident/i, { timeout: 10000 }).should('exist');
      cy.contains(/incident.*actif/i, { timeout: 10000 }).should('exist');
      cy.contains(/incident.*récent/i, { timeout: 10000 }).should('exist');
      cy.contains(/utilisateur.*récent/i, { timeout: 10000 }).should('exist');
      
    } else if (role === 'Technicien') {
      // Vérifications pour le technicien
      cy.contains(/total.*équipement/i, { timeout: 10000 }).should('exist');
      cy.contains(/total.*incident/i, { timeout: 10000 }).should('exist');
      cy.contains(/incident.*actif/i, { timeout: 10000 }).should('exist');
      cy.contains(/incident.*récent/i, { timeout: 10000 }).should('exist');
      
      // Éléments qui ne devraient PAS exister pour le technicien
      cy.contains(/utilisateur.*récent/i).should('not.exist');
      
    } else if (role === 'Employe') {
      // Vérifications pour l'employé - approche plus flexible
      
      // D'abord vérifier qu'on est bien sur le dashboard
      cy.get('body').should(($body) => {
        const text = $body.text().toLowerCase();
        expect(text).to.include('incident');
      });

      // Essayer différentes formulations
      cy.get('body').then(($body) => {
        const bodyText = $body.text().toLowerCase();
        
        if (bodyText.includes('total incidents')) {
          cy.contains('Total Incidents', { timeout: 5000 }).should('exist');
        } else if (bodyText.includes('total d\'incidents')) {
          cy.contains('Total d\'incidents', { timeout: 5000 }).should('exist');
        } else if (bodyText.includes('incidents totaux')) {
          cy.contains('Incidents totaux', { timeout: 5000 }).should('exist');
        } else {
          // Si aucune formulation standard n'est trouvée, chercher n'importe quel texte contenant "incident"
          cy.contains(/incident/i, { timeout: 10000 }).should('exist');
        }
      });

      cy.contains(/incident.*actif/i, { timeout: 10000 }).should('exist');
      cy.contains(/incident.*récent/i, { timeout: 10000 }).should('exist');
      
      // Éléments qui ne devraient PAS exister pour l'employé
      cy.contains(/total.*équipement/i).should('not.exist');
      cy.contains(/utilisateur.*récent/i).should('not.exist');
      cy.contains(/technicien/i).should('not.exist');
    }

    // Capturer une screenshot après les vérifications
    cy.screenshot(`dashboard-${role.toLowerCase()}-after-checks`);
  };

  beforeEach(() => {
    // Nettoyer avant chaque test
    cy.clearCookies();
    cy.clearLocalStorage();
  });

  it('Admin Dashboard - Vérifie les éléments spécifiques à l\'admin', () => {
    login('admin@gmail.com', 'admin');
    checkDashboardElements('Admin');
  });

  it('Technicien Dashboard - Vérifie les éléments spécifiques au technicien', () => {
    login('technicien@gmail.com', 'technicien');
    checkDashboardElements('Technicien');
  });

  it('Employé Dashboard - Vérifie les éléments spécifiques à l\'employé', () => {
    login('employe@gmail.com', 'employe');
    checkDashboardElements('Employe');
  });

  // Test de debug pour voir le contenu de la page
  it('DEBUG - Afficher le contenu de la page employé', () => {
    login('employe@gmail.com', 'employe');
    
    // Attendre que la page soit chargée
    cy.wait(5000);
    
    // Afficher tout le texte de la page dans la console
    cy.get('body').then(($body) => {
      const pageText = $body.text();
      console.log('=== TEXTE COMPLET DE LA PAGE EMPLOYÉ ===');
      console.log(pageText);
      console.log('========================================');
      
      // Séparer par lignes pour plus de lisibilité
      const lines = pageText.split('\n').filter(line => line.trim().length > 0);
      console.log('=== LIGNES DE TEXTE ===');
      lines.forEach((line, index) => {
        console.log(`${index}: ${line.trim()}`);
      });
    });
    
    // Prendre une screenshot
    cy.screenshot('debug-employe-full-page');
  });
});