import React, { useState, useEffect } from 'react';
import { QRCodeSVG } from 'qrcode.react';
import {
  Search,
  Plus,
  Filter,
  QrCode,
  Edit,
  Trash2,
  X,
  RefreshCw,
  AlertCircle,
  Package,
  User,
  Calendar,
  CheckCircle,
  Clock,
  AlertTriangle,
  Sparkles,
  Users,
  Printer,
  UserMinus,
  Shield,
  SparklesIcon
} from 'lucide-react';
import EquipmentModal from '../../components/modals/EquipmentModal';
import axios from 'axios';

interface EquipmentListProps {
  userRole: 'Admin' | 'Technicien' | 'Employé';
  currentUserId?: string;
}

interface Equipment {
  _id: string;
  nom: string;
  type: string;
  statut: string;
  assignedTo?: string | null;
  numeroSerie: string;
  dateAchat: string;
  qrCodePath?: string;
  createdBy?: string;
  updatedBy?: string;
}

interface User {
  _id: string;
  name: string;
  email: string;
  role?: string;
  department?: string;
}

interface Affectation {
  _id: string;
  employeId: User;
  equipementId: any;
  dateAffectation: string;
  dateRetour?: string;
  etat?: string;
}

const QRCodeModal = ({ 
  equipment, 
  isOpen, 
  onClose 
}: {
  equipment: Equipment;
  isOpen: boolean;
  onClose: () => void;
}) => {
  if (!isOpen) return null;

  const qrData = JSON.stringify({
    id: equipment._id,
    nom: equipment.nom,
    serial: equipment.numeroSerie,
    type: equipment.type
  });

  const handlePrint = () => {
    const svg = document.getElementById('qr-svg') as SVGSVGElement | null;
    if (!svg) {
      alert("QR code non trouvé");
      return;
    }

    const serializer = new XMLSerializer();
    const svgString = serializer.serializeToString(svg);
    const svgBlob = new Blob([svgString], {type:"image/svg+xml;charset=utf-8"});
    const url = URL.createObjectURL(svgBlob);

    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <html>
        <head><title>QR Code - ${equipment.nom}</title></head>
        <body style="text-align:center; font-family:sans-serif; padding:20px;">
          <h2>QR Code - ${equipment.nom}</h2>
          <img src="${url}" width="200" height="200" />
          <p><strong>Numéro de série:</strong> ${equipment.numeroSerie}</p>
          <p><strong>Type:</strong> ${equipment.type}</p>
        </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.focus();
      setTimeout(() => {
        printWindow.print();
        printWindow.close();
        URL.revokeObjectURL(url);
      }, 300);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl w-full max-w-md overflow-hidden shadow-xl border border-gray-700/50">
        <div className="flex justify-between items-center border-b border-gray-700 p-6">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-blue-500/20 rounded-lg border border-blue-500/30">
              <QrCode className="h-6 w-6 text-blue-400" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-white">QR Code</h2>
              <p className="text-sm text-gray-400">{equipment.nom}</p>
            </div>
          </div>
          <button 
            onClick={onClose} 
            className="text-gray-400 hover:text-white transition-colors p-2 rounded-lg hover:bg-gray-700/50"
          >
            <X className="h-5 w-5" />
          </button>
        </div>

        <div className="p-6">
          <div className="flex flex-col items-center space-y-6">
            <div className="border-2 border-gray-600 rounded-xl p-6 bg-gray-800/50">
              <QRCodeSVG 
                id="qr-svg"
                value={qrData} 
                size={200}
                level="H"
                includeMargin={true}
                fgColor="#60a5fa"
                bgColor="transparent"
              />
            </div>

            <div className="text-center space-y-2">
              <p className="text-sm font-medium text-gray-300">Numéro de série</p>
              <p className="text-lg font-mono text-blue-400">{equipment.numeroSerie}</p>
              <p className="text-sm text-gray-400">Type: ${equipment.type}</p>
              <p className="text-xs text-blue-400 mt-2 font-medium flex items-center justify-center">
                <Sparkles className="h-3 w-3 mr-1" />
                Scannez pour voir les détails
              </p>
            </div>
          </div>

          <div className="mt-6 flex justify-center">
            <button
              onClick={handlePrint}
              className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-500 text-white rounded-xl hover:from-blue-500 hover:to-blue-400 transition-all duration-200 transform hover:scale-105"
            >
              <Printer className="h-4 w-4" />
              <span>Imprimer</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

const LoadingSkeleton = () => (
  <div className="min-h-screen bg-black text-white pt-20 px-6">
    <div className="max-w-7xl mx-auto space-y-6">
      <div className="flex justify-between items-center">
        <div className="animate-pulse bg-gray-700 h-10 w-1/3 rounded-xl"></div>
        <div className="animate-pulse bg-gray-700 h-12 w-48 rounded-xl"></div>
      </div>
      <div className="bg-gradient-to-br from-gray-900/90 to-gray-800/80 backdrop-blur-xl rounded-2xl border border-gray-700/30 p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-12 bg-gray-700 rounded-xl w-full"></div>
          <div className="space-y-3">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-20 bg-gray-800 rounded-xl"></div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
);

const EquipmentList: React.FC<EquipmentListProps> = ({ userRole, currentUserId }) => {
  const API_BASE_URL = 'http://localhost:8000/api';
  const [equipmentData, setEquipmentData] = useState<Equipment[]>([]);
  const [affectations, setAffectations] = useState<Affectation[]>([]);
  const [employees, setEmployees] = useState<User[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedEquipment, setSelectedEquipment] = useState<Equipment | null>(null);
  const [modalMode, setModalMode] = useState<'add' | 'edit'>('add');
  const [isQRModalOpen, setIsQRModalOpen] = useState(false);
  const [selectedQREquipment, setSelectedQREquipment] = useState<Equipment | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [apiLoading, setApiLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);

  const [currentUser, setCurrentUser] = useState<any>(null);

  useEffect(() => {
    const loadUserData = () => {
      try {
        const userData = localStorage.getItem('user');
        if (userData) {
          const user = JSON.parse(userData);
          setCurrentUser(user);
        }
      } catch (error) {
        console.error('❌ Erreur chargement user:', error);
      }
    };

    loadUserData();
  }, []);

  const effectiveUserId = currentUserId || currentUser?.id || currentUser?._id;

  // FONCTION POUR OBTENIR L'ID D'ÉQUIPEMENT
  const getEquipmentId = (affectation: Affectation): string => {
    if (typeof affectation.equipementId === 'object' && affectation.equipementId !== null) {
      return affectation.equipementId._id || affectation.equipementId;
    }
    return affectation.equipementId;
  };

  // FONCTION POUR OBTENIR L'ID EMPLOYÉ
  const getEmployeeId = (affectation: Affectation): string => {
    if (typeof affectation.employeId === 'object' && affectation.employeId !== null) {
      return affectation.employeId._id || affectation.employeId;
    }
    return affectation.employeId;
  };

  // FONCTION POUR VÉRIFIER SI UN ÉQUIPEMENT EST ASSIGNÉ À L'UTILISATEUR COURANT
  const isEquipmentAssignedToCurrentUser = (equipmentId: string): boolean => {
    if (!effectiveUserId) {
      console.log('❌ Aucun effectiveUserId trouvé');
      return false;
    }
    
    try {
      const activeAffectation = affectations.find(aff => {
        const affEquipmentId = getEquipmentId(aff);
        const employeeId = getEmployeeId(aff);
        
        const isEquipmentMatch = affEquipmentId && affEquipmentId.toString() === equipmentId.toString();
        const isEmployeeMatch = employeeId && employeeId.toString() === effectiveUserId.toString();
        const isActive = !aff.dateRetour;
        
        return isEquipmentMatch && isEmployeeMatch && isActive;
      });
      
      return !!activeAffectation;
      
    } catch (error) {
      console.error("❌ Erreur lors de la vérification d'assignment:", error);
      return false;
    }
  };

  // FONCTION POUR OBTENIR L'EMPLOYÉ ASSIGNÉ (UNIQUEMENT POUR ADMIN/TECHNICIEN)
  const getAssignedEmployee = (equipmentId: string): User | null => {
    if (userRole === 'Employé') {
      return null; // Les employés ne voient pas les autres utilisateurs
    }

    try {
      const activeAffectation = affectations.find(aff => {
        const affEquipmentId = getEquipmentId(aff);
        const isEquipmentMatch = affEquipmentId && affEquipmentId.toString() === equipmentId.toString();
        const isActive = !aff.dateRetour;
        
        return isEquipmentMatch && isActive;
      });
      
      if (activeAffectation && activeAffectation.employeId) {
        if (typeof activeAffectation.employeId === 'object') {
          return activeAffectation.employeId;
        }
        return employees.find(emp => emp._id === activeAffectation.employeId) || null;
      }
      
      return null;
    } catch (error) {
      console.error("❌ Erreur lors de la recherche de l'employé assigné:", error);
      return null;
    }
  };

  // FONCTION POUR OBTENIR L'ÉTAT
  const getAffectationEtat = (equipmentId: string): string => {
    try {
      const activeAffectation = affectations.find(aff => {
        const affEquipmentId = getEquipmentId(aff);
        const employeeId = getEmployeeId(aff);
        
        const isEquipmentMatch = affEquipmentId && affEquipmentId.toString() === equipmentId.toString();
        const isEmployeeMatch = userRole === 'Employé' 
          ? employeeId && employeeId.toString() === effectiveUserId.toString()
          : true;
        const isActive = !aff.dateRetour;
        
        return isEquipmentMatch && isEmployeeMatch && isActive;
      });
      
      return activeAffectation?.etat || 'Non défini';
    } catch (error) {
      console.error("❌ Erreur lors de la recherche de l'état d'affectation:", error);
      return 'Erreur';
    }
  };

  // FONCTION POUR OBTENIR LA DATE D'AFFECTATION
  const getAffectationDate = (equipmentId: string): string => {
    try {
      const activeAffectation = affectations.find(aff => {
        const affEquipmentId = getEquipmentId(aff);
        const employeeId = getEmployeeId(aff);
        
        const isEquipmentMatch = affEquipmentId && affEquipmentId.toString() === equipmentId.toString();
        const isEmployeeMatch = userRole === 'Employé' 
          ? employeeId && employeeId.toString() === effectiveUserId.toString()
          : true;
        const isActive = !aff.dateRetour;
        
        return isEquipmentMatch && isEmployeeMatch && isActive;
      });
      
      return activeAffectation?.dateAffectation || 'Non assigné';
    } catch (error) {
      console.error("❌ Erreur lors de la recherche de la date d'affectation:", error);
      return 'Erreur';
    }
  };

  // FONCTION POUR OBTENIR L'ID D'AFFECTATION
  const getAffectationId = (equipmentId: string): string | null => {
    try {
      const activeAffectation = affectations.find(aff => {
        const affEquipmentId = getEquipmentId(aff);
        const employeeId = getEmployeeId(aff);
        
        const isEquipmentMatch = affEquipmentId && affEquipmentId.toString() === equipmentId.toString();
        const isEmployeeMatch = userRole === 'Employé' 
          ? employeeId && employeeId.toString() === effectiveUserId.toString()
          : true;
        const isActive = !aff.dateRetour;
        
        return isEquipmentMatch && isEmployeeMatch && isActive;
      });
      
      return activeAffectation?._id || null;
    } catch (error) {
      console.error("❌ Erreur lors de la recherche de l'ID d'affectation:", error);
      return null;
    }
  };

  // FONCTION DE DEBUG
  const debugAffectations = () => {
    console.log("🐛 DEBUG - État des affectations:");
    console.log(`📊 Nombre d'affectations: ${affectations.length}`);
    console.log(`📦 Nombre d'équipements: ${equipmentData.length}`);
    console.log(`👤 ID utilisateur courant: ${effectiveUserId}`);
    console.log(`🎯 Rôle utilisateur: ${userRole}`);
    
    const userAffectations = affectations.filter(aff => {
      const employeeId = getEmployeeId(aff);
      return employeeId && employeeId.toString() === effectiveUserId?.toString() && !aff.dateRetour;
    });
    
    console.log(`\n👤 Affectations de l'utilisateur courant (${userAffectations.length}):`);
    userAffectations.forEach((aff, index) => {
      const equipementId = getEquipmentId(aff);
      const employeId = getEmployeeId(aff);
      
      console.log(`\n🔍 Affectation ${index + 1}:`);
      console.log(`  - ID: ${aff._id}`);
      console.log(`  - EquipementId: ${equipementId}`);
      console.log(`  - EmployeId: ${employeId}`);
      console.log(`  - Date affectation: ${aff.dateAffectation}`);
      console.log(`  - Date retour: ${aff.dateRetour || 'Aucune'}`);
      console.log(`  - État: ${aff.etat || 'Non défini'}`);
    });
  };

  const getAuthToken = (): string | null => {
    const token = 
      localStorage.getItem('authToken') ||
      localStorage.getItem('token') ||
      localStorage.getItem('userToken');
    
    return token ? token.replace(/"/g, '').trim() : null;
  };

  const getAuthHeaders = () => {
    const token = getAuthToken();
    const headers: any = {
      'Content-Type': 'application/json'
    };
    
    if (token) {
      headers['Authorization'] = token.startsWith('Bearer ') ? token : `Bearer ${token}`;
    }
    
    return headers;
  };

  const fetchEquipment = async () => {
    try {
      const headers = getAuthHeaders();
      const response = await axios.get(`${API_BASE_URL}/equipements`, {
        headers: headers,
        timeout: 10000
      });
      
      let equipmentData = [];
      
      if (Array.isArray(response.data)) {
        equipmentData = response.data;
      } else if (response.data && typeof response.data === 'object') {
        if (Array.isArray(response.data.data)) {
          equipmentData = response.data.data;
        } else if (Array.isArray(response.data.equipements)) {
          equipmentData = response.data.equipements;
        } else if (Array.isArray(response.data.equipments)) {
          equipmentData = response.data.equipments;
        } else {
          equipmentData = [response.data];
        }
      }
      
      setEquipmentData(equipmentData);
      return equipmentData;
    } catch (error) {
      console.error('❌ Erreur fetchEquipment:', error);
      setEquipmentData([]);
      return [];
    }
  };

  const fetchAffectations = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/affectations`, {
        headers: getAuthHeaders(),
        timeout: 10000
      });
      
      const affectationsData = Array.isArray(response.data) ? response.data : 
                             Array.isArray(response.data?.data) ? response.data.data : 
                             Array.isArray(response.data?.affectations) ? response.data.affectations : [];
      
      setAffectations(affectationsData);
      return affectationsData;
      
    } catch (error) {
      console.error("❌ Erreur affectations:", error);
      setAffectations([]);
      return [];
    }
  };

  const fetchEmployees = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/utilisateur`, {
        headers: getAuthHeaders(),
        timeout: 10000
      });
      
      let usersData = [];
      
      if (Array.isArray(response.data)) {
        usersData = response.data;
      } else if (response.data && typeof response.data === 'object') {
        if (Array.isArray(response.data.data)) {
          usersData = response.data.data;
        } else if (Array.isArray(response.data.users)) {
          usersData = response.data.users;
        } else if (Array.isArray(response.data.utilisateurs)) {
          usersData = response.data.utilisateurs;
        } else {
          usersData = [response.data];
        }
      }
      
      setEmployees(usersData);
      return usersData;
      
    } catch (error: any) {
      console.error("❌ Erreur lors du chargement des utilisateurs:", error);
      setEmployees([]);
      return [];
    }
  };

  const loadData = async (showRefreshIndicator = false) => {
    if (showRefreshIndicator) {
      setRefreshing(true);
    } else {
      setIsLoading(true);
    }
    setError(null);
    
    try {
      await Promise.allSettled([
        fetchEquipment(),
        fetchAffectations(),
        fetchEmployees()
      ]);

      setTimeout(() => {
        debugAffectations();
      }, 500);
      
    } catch (error) {
      console.error("❌ Erreur lors du chargement des données:", error);
      setError('Erreur de chargement des données');
    } finally {
      setIsLoading(false);
      setRefreshing(false);
    }
  };

  useEffect(() => {
    loadData();
  }, [effectiveUserId, userRole]);

  // FONCTION POUR FILTRER LES ÉQUIPEMENTS VISIBLES
  const getVisibleEquipment = () => {
    let visibleEquipment = equipmentData;

    // FILTRE IMPORTANT: Les employés ne voient QUE leurs équipements assignés
    if (userRole === 'Employé' && effectiveUserId) {
      visibleEquipment = equipmentData.filter(equipment => {
        return isEquipmentAssignedToCurrentUser(equipment._id);
      });
    }

    // Application des filtres de recherche et statut
    const filtered = visibleEquipment
      .filter((item) => filterStatus === 'all' || item.statut === filterStatus)
      .filter((item) =>
        item.nom.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.numeroSerie.toLowerCase().includes(searchTerm.toLowerCase())
      );

    return filtered;
  };

  const filteredEquipment = getVisibleEquipment();

  const handleSaveEquipment = async (saveData: any) => {
    setApiLoading(true);
    try {
      const { equipment, affectation, mode, existingEquipmentId } = saveData;

      // Validation des données obligatoires
      if (!equipment.nom?.trim() || !equipment.type || !equipment.numeroSerie?.trim() || !equipment.dateAchat) {
        alert('❌ Erreur: Tous les champs obligatoires doivent être remplis');
        setApiLoading(false);
        return;
      }

      const createdById = effectiveUserId;

      if (mode === 'add') {
        // Création nouvel équipement
        const equipmentPayload = {
          nom: equipment.nom.trim(),
          type: equipment.type,
          numeroSerie: equipment.numeroSerie.trim(),
          dateAchat: equipment.dateAchat,
          statut: affectation?.employeId ? 'Assigné' : 'Disponible',
          createdBy: createdById
        };

        const equipmentResponse = await axios.post(`${API_BASE_URL}/equipements`, equipmentPayload, {
          headers: getAuthHeaders(),
          timeout: 15000
        });
        
        const newEquipment = equipmentResponse.data;

        // Création de l'affectation si un employé est sélectionné
        if (affectation && affectation.employeId && newEquipment._id) {
          const affectationPayload = {
            employeId: affectation.employeId,
            equipementId: newEquipment._id,
            etat: affectation.etat || 'Bon état',
            dateAffectation: new Date().toISOString(),
            createdBy: createdById
          };

          await axios.post(`${API_BASE_URL}/affectations`, affectationPayload, {
            headers: getAuthHeaders(),
            timeout: 15000
          });

          const assignedEmployee = employees.find(emp => emp._id === affectation.employeId);
          const employeeName = assignedEmployee?.name || 'l\'utilisateur';
          
          alert(`Équipement créé et assigné avec succès !\n\n📋 Détails:\n• Nom: ${equipment.nom}\n• Type: ${equipment.type}\n• N° série: ${equipment.numeroSerie}\n• Statut: Assigné\n• Assigné à: ${employeeName}\n• État: ${affectation.etat}`);
        } else {
          alert(` Équipement créé avec succès !\n\n📋 Détails:\n• Nom: ${equipment.nom}\n• Type: ${equipment.type}\n• N° série: ${equipment.numeroSerie}\n• Statut: Disponible\n• Date achat: ${equipment.dateAchat}`);
        }

      } else {
        // MODE ÉDITION
        const equipmentPayload = {
          nom: equipment.nom.trim(),
          type: equipment.type,
          numeroSerie: equipment.numeroSerie.trim(),
          dateAchat: equipment.dateAchat,
          statut: affectation?.employeId ? 'Assigné' : 'Disponible',
          updatedBy: createdById
        };

        await axios.put(`${API_BASE_URL}/equipements/${existingEquipmentId}`, equipmentPayload, {
          headers: getAuthHeaders(),
          timeout: 15000
        });

        // Gérer l'affectation
        const currentAffectationId = getAffectationId(existingEquipmentId);
        
        if (affectation && affectation.employeId) {
          if (currentAffectationId) {
            // Mettre à jour l'affectation existante
            await axios.put(`${API_BASE_URL}/affectations/${currentAffectationId}`, {
              employeId: affectation.employeId,
              etat: affectation.etat,
              dateAffectation: new Date().toISOString(),
              dateRetour: null,
              updatedBy: createdById
            }, {
              headers: getAuthHeaders(),
              timeout: 15000
            });
          } else {
            // Créer une nouvelle affectation
            await axios.post(`${API_BASE_URL}/affectations`, {
              employeId: affectation.employeId,
              equipementId: existingEquipmentId,
              etat: affectation.etat,
              dateAffectation: new Date().toISOString(),
              createdBy: createdById
            }, {
              headers: getAuthHeaders(),
              timeout: 15000
            });
          }

          const assignedEmployee = employees.find(emp => emp._id === affectation.employeId);
          const employeeName = assignedEmployee?.name || 'l\'utilisateur';
          
          alert(`✅ Équipement modifié et assigné avec succès !\n\n📋 Détails:\n• Nom: ${equipment.nom}\n• Type: ${equipment.type}\n• N° série: ${equipment.numeroSerie}\n• Statut: Assigné\n• Assigné à: ${employeeName}\n• État: ${affectation.etat}`);

        } else {
          // Désaffectation
          if (currentAffectationId) {
            await axios.put(`${API_BASE_URL}/affectations/${currentAffectationId}`, {
              dateRetour: new Date().toISOString(),
              updatedBy: createdById
            }, {
              headers: getAuthHeaders(),
              timeout: 15000
            });
          }

          alert(`✅ Équipement modifié et désaffecté avec succès !\n\n📋 Détails:\n• Nom: ${equipment.nom}\n• Type: ${equipment.type}\n• N° série: ${equipment.numeroSerie}\n• Statut: Disponible`);
        }
      }

      // Recharger les données
      await loadData();
      setIsModalOpen(false);
      setSelectedEquipment(null);
      
    } catch (error: any) {
      console.error("❌ Erreur lors de la sauvegarde:", error);
      
      let errorMessage = "Erreur lors de la sauvegarde";
      
      if (axios.isAxiosError(error)) {
        const responseData = error.response?.data;
        if (responseData?.error) {
          errorMessage = responseData.error;
        } else if (responseData?.message) {
          errorMessage = responseData.message;
        } else {
          errorMessage = `Erreur ${error.response?.status}: ${error.message}`;
        }
      }
      
      alert(`❌ ${errorMessage}`);
    } finally {
      setApiLoading(false);
    }
  };

  const handleAdd = () => {
    setSelectedEquipment(null);
    setModalMode('add');
    setIsModalOpen(true);
  };

  const handleEdit = (equipment: Equipment) => {
    setSelectedEquipment(equipment);
    setModalMode('edit');
    setIsModalOpen(true);
  };

  const handleDelete = async (equipmentId: string) => {
    if (!window.confirm("Êtes-vous sûr de vouloir supprimer cet équipement?")) return;
    
    setApiLoading(true);
    try {
      await axios.delete(`${API_BASE_URL}/equipements/${equipmentId}`, {
        headers: getAuthHeaders(),
        timeout: 15000
      });
      setEquipmentData(prev => prev.filter(item => item._id !== equipmentId));
    } catch (error) {
      alert("Erreur lors de la suppression");
    } finally {
      setApiLoading(false);
    }
  };

  const handleQRCode = (equipment: Equipment) => {
    if (!equipment?.numeroSerie) {
      alert('Numéro de série manquant pour générer le QR code');
      return;
    }
    setSelectedQREquipment(equipment);
    setIsQRModalOpen(true);
  };

  const handleUnassign = async (equipmentId: string) => {
    const affectationId = getAffectationId(equipmentId);
    if (!affectationId) {
      alert("Aucune affectation trouvée pour cet équipement");
      return;
    }
    
    if (!window.confirm("Êtes-vous sûr de vouloir désaffecter cet équipement?")) return;

    setApiLoading(true);
    try {
      const createdById = effectiveUserId;

      await axios.put(`${API_BASE_URL}/affectations/${affectationId}`, {
        dateRetour: new Date().toISOString(),
        updatedBy: createdById
      }, {
        headers: getAuthHeaders(),
        timeout: 15000
      });
      
      await axios.put(`${API_BASE_URL}/equipements/${equipmentId}`, {
        statut: 'Disponible',
        updatedBy: createdById
      }, {
        headers: getAuthHeaders(),
        timeout: 15000
      });
      
      await loadData();
    } catch (error) {
      alert("Erreur lors de la désaffectation");
    } finally {
      setApiLoading(false);
    }
  };

  const canAddEditEquipment = () => {
    return userRole === 'Admin' || userRole === 'Technicien';
  };

  const canDeleteEquipment = () => {
    return userRole === 'Admin' || userRole === 'Technicien';
  };

  const canViewQRCode = () => {
    return true;
  };

  const canUnassignEquipment = () => {
    return userRole === 'Admin' || userRole === 'Technicien';
  };

  const getStatusIcon = (statut: string) => {
    switch (statut) {
      case 'Disponible': return <CheckCircle className="h-4 w-4" />;
      case 'En panne': return <AlertTriangle className="h-4 w-4" />;
      case 'En maintenance': return <Clock className="h-4 w-4" />;
      case 'Assigné': return <User className="h-4 w-4" />;
      case 'Réservé': return <AlertCircle className="h-4 w-4" />;
      default: return <Package className="h-4 w-4" />;
    }
  };

  const getStatusColor = (statut: string) => {
    switch (statut) {
      case 'Disponible': return 'bg-green-500/20 text-green-400 border-green-500/30';
      case 'Assigné': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';
      case 'En panne': return 'bg-red-500/20 text-red-400 border-red-500/30';
      case 'En maintenance': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      case 'Réservé': return 'bg-purple-500/20 text-purple-400 border-purple-500/30';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  };

  const formatDate = (dateString: string) => {
    if (!dateString || dateString === 'Non assigné') return '-';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('fr-FR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
    } catch {
      return '-';
    }
  };

  if (isLoading) {
    return <LoadingSkeleton />;
  }

  return (
    <div className="min-h-screen bg-black text-white pt-20 px-6 relative overflow-hidden">
      <div className="relative z-10 max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex flex-col lg:flex-row lg:justify-between lg:items-center mb-8">
          <div>
            <h2 className="text-4xl font-black bg-gradient-to-r from-white to-blue-400 bg-clip-text text-transparent mb-2">
              {userRole === 'Employé' 
                ? 'Mes équipements assignés'
                : 'Gestion des équipements'
              }
            </h2>
            <p className="text-gray-400">
              {filteredEquipment.length} équipement{filteredEquipment.length !== 1 ? 's' : ''} 
              {equipmentData.length > 0 && userRole !== 'Employé' && ` sur ${equipmentData.length} au total`}
              {userRole === 'Employé' && ` assigné${filteredEquipment.length !== 1 ? 's' : ''} à moi`}
            </p>
          </div>
          
          <div className="flex space-x-3 mt-4 lg:mt-0">
            <button
              onClick={() => loadData(true)}
              disabled={refreshing}
              className="flex items-center space-x-2 px-4 py-3 bg-gray-700/50 hover:bg-gray-600/50 text-white rounded-xl transition-all duration-200 disabled:opacity-50 border border-gray-600"
            >
              <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
              <span>{refreshing ? 'Actualisation...' : 'Actualiser'}</span>
            </button>
            
            {canAddEditEquipment() && (
              <button
                onClick={handleAdd}
                className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-500 text-white rounded-xl hover:from-blue-500 hover:to-blue-400 transition-all duration-200 transform hover:scale-105 disabled:opacity-50"
                disabled={apiLoading}
              >
                <Plus className="h-5 w-5" />
                <span>{apiLoading ? 'Traitement...' : 'Ajouter un équipement'}</span>
              </button>
            )}
          </div>
        </div>

        {/* Search and Filter */}
        <div className="bg-gradient-to-br from-gray-900/90 to-gray-800/80 backdrop-blur-xl rounded-2xl p-6 border border-gray-700/30 mb-6">
          <div className="flex flex-col lg:flex-row lg:justify-between space-y-4 lg:space-y-0">
            <div className="relative w-full lg:w-96">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                placeholder={userRole === 'Employé' ? "Rechercher dans mes équipements..." : "Rechercher un équipement..."}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 block w-full bg-gray-800/50 border border-gray-700 rounded-xl shadow-sm py-3 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-gray-400"
              />
            </div>

            <div className="flex items-center space-x-4">
              <Filter className="h-5 w-5 text-gray-400" />
              <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="bg-gray-800/50 border border-gray-700 rounded-xl shadow-sm py-3 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white"
              >
                <option value="all">Tous les statuts</option>
                <option value="Disponible">Disponible</option>
                <option value="Assigné">Assigné</option>
                <option value="En panne">En panne</option>
                <option value="En maintenance">En maintenance</option>
                <option value="Réservé">Réservé</option>
              </select>
            </div>
          </div>
        </div>

        {/* Equipment Table */}
        <div className="bg-gradient-to-br from-gray-900/90 to-gray-800/80 backdrop-blur-xl rounded-2xl border border-gray-700/30 overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-700/50">
              <thead className="bg-gray-800/50">
                <tr>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-400 uppercase tracking-wider">ÉQUIPEMENT</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-400 uppercase tracking-wider">TYPE</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-400 uppercase tracking-wider">STATUT</th>
                  {/* COLONNE EMPLOYÉ ASSIGNÉ UNIQUEMENT POUR ADMIN/TECHNICIEN */}
                  {(userRole === 'Admin' || userRole === 'Technicien') && (
                    <th className="px-6 py-4 text-left text-xs font-semibold text-gray-400 uppercase tracking-wider">EMPLOYÉ ASSIGNÉ</th>
                  )}
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-400 uppercase tracking-wider">ÉTAT</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-400 uppercase tracking-wider">DATE D'AFFECTATION</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-400 uppercase tracking-wider">N° DE SÉRIE</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-400 uppercase tracking-wider">DATE D'ACHAT</th>
                  <th className="px-6 py-4 text-right text-xs font-semibold text-gray-400 uppercase tracking-wider">ACTIONS</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-700/50">
                {filteredEquipment.map((equipment) => {
                  const assignedEmployee = getAssignedEmployee(equipment._id);
                  const affectationEtat = getAffectationEtat(equipment._id);
                  const affectationDate = getAffectationDate(equipment._id);
                  
                  return (
                    <tr key={equipment._id} className="hover:bg-gray-800/30 transition-colors duration-200">
                      <td className="px-6 py-4">
                        <div className="flex items-center">
                          <Package className="h-5 w-5 text-blue-400 mr-3" />
                          <div className="text-sm font-semibold text-white">{equipment.nom}</div>
                        </div>
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-300">{equipment.type}</td>
                      <td className="px-6 py-4">
                        <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold border ${getStatusColor(equipment.statut)}`}>
                          {getStatusIcon(equipment.statut)}
                          <span className="ml-1">{equipment.statut}</span>
                        </span>
                      </td>
                      {/* CELLULE EMPLOYÉ ASSIGNÉ UNIQUEMENT POUR ADMIN/TECHNICIEN */}
                      {(userRole === 'Admin' || userRole === 'Technicien') && (
                        <td className="px-6 py-4 text-sm text-gray-300">
                          {assignedEmployee ? (
                            <div className="flex items-center">
                              <User className="h-4 w-4 text-green-400 mr-2" />
                              <span>{assignedEmployee.name}</span>
                            </div>
                          ) : (
                            <span className="text-gray-500">-</span>
                          )}
                        </td>
                      )}
                      <td className="px-6 py-4 text-sm text-gray-300">
                        {affectationEtat && affectationEtat !== 'Non défini' ? (
                          <span className="capitalize bg-gray-700/50 px-2 py-1 rounded-lg border border-gray-600">
                            {affectationEtat}
                          </span>
                        ) : (
                          <span className="text-gray-500 italic">Non défini</span>
                        )}
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-300">
                        {affectationDate && affectationDate !== 'Non assigné' ? (
                          <div className="flex items-center">
                            <Calendar className="h-3 w-3 mr-1 text-blue-400" />
                            {formatDate(affectationDate)}
                          </div>
                        ) : (
                          <span className="text-gray-500 italic">-</span>
                        )}
                      </td>
                      <td className="px-6 py-4 text-sm font-mono text-blue-400">
                        {equipment.numeroSerie}
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-300">
                        {formatDate(equipment.dateAchat)}
                      </td>
                      <td className="px-6 py-4 text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          {canViewQRCode() && (
                            <button
                              onClick={() => handleQRCode(equipment)}
                              className="p-2 text-blue-400 hover:text-blue-300 hover:bg-blue-500/20 rounded-xl transition-all duration-200 border border-blue-500/30"
                              title="Générer QR Code"
                            >
                              <QrCode className="h-4 w-4" />
                            </button>
                          )}

                          {canAddEditEquipment() && (
                            <button
                              onClick={() => handleEdit(equipment)}
                              className="p-2 text-green-400 hover:text-green-300 hover:bg-green-500/20 rounded-xl transition-all duration-200 border border-green-500/30"
                              title="Modifier"
                            >
                              <Edit className="h-4 w-4" />
                            </button>
                          )}

                          {canUnassignEquipment() && equipment.statut === 'Assigné' && (
                            <button
                              onClick={() => handleUnassign(equipment._id)}
                              className="p-2 text-orange-400 hover:text-orange-300 hover:bg-orange-500/20 rounded-xl transition-all duration-200 border border-orange-500/30"
                              title="Désaffecter"
                            >
                              <UserMinus className="h-4 w-4" />
                            </button>
                          )}

                          {canDeleteEquipment() && (
                            <button
                              onClick={() => handleDelete(equipment._id)}
                              className="p-2 text-red-400 hover:text-red-300 hover:bg-red-500/20 rounded-xl transition-all duration-200 border border-red-500/30"
                              title="Supprimer"
                            >
                              <Trash2 className="h-4 w-4" />
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          {filteredEquipment.length === 0 && (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">🔍</div>
              <h3 className="text-lg font-semibold text-white mb-2">
                {searchTerm || filterStatus !== 'all' 
                  ? 'Aucun équipement trouvé' 
                  : userRole === 'Employé' 
                    ? 'Aucun équipement assigné'
                    : 'Aucun équipement disponible'
                }
              </h3>
              <p className="text-gray-400 max-w-md mx-auto">
                {searchTerm || filterStatus !== 'all'
                  ? 'Essayez de modifier vos critères de recherche ou de filtrage.'
                  : userRole === 'Employé' 
                    ? 'Aucun équipement ne vous est actuellement assigné.'
                    : 'Commencez par ajouter votre premier équipement.'
                }
              </p>
              {(searchTerm || filterStatus !== 'all') && (
                <button
                  onClick={() => {
                    setSearchTerm('');
                    setFilterStatus('all');
                  }}
                  className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors"
                >
                  Réinitialiser les filtres
                </button>
              )}
            </div>
          )}
        </div>
      </div>

      {isModalOpen && (
        <EquipmentModal
          isOpen={isModalOpen}
          onClose={() => {
            setIsModalOpen(false);
            setSelectedEquipment(null);
          }}
          onSave={handleSaveEquipment}
          equipment={selectedEquipment}
          mode={modalMode}
          userRole={userRole}
          currentUserId={effectiveUserId}
          affectations={affectations || []}
          employees={employees || []}
          isLoading={apiLoading}
        />
      )}

      {selectedQREquipment && (
        <QRCodeModal
          equipment={selectedQREquipment}
          isOpen={isQRModalOpen}
          onClose={() => {
            setIsQRModalOpen(false);
            setSelectedQREquipment(null);
          }}
        />
      )}

      {apiLoading && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-900 rounded-2xl p-8 border border-gray-700 flex items-center space-x-4">
            <RefreshCw className="h-6 w-6 text-blue-400 animate-spin" />
            <span className="text-white font-medium">Traitement en cours...</span>
          </div>
        </div>
      )}
    </div>
  );
};

export default EquipmentList;